{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module ResourceLoader\n * @description Manages loading of resources trough fetch to boost caching.\n * Transparently relies on a WebWorker if possible to load on a separate thread.\n *\n * @example\n * import ResourceLoader from '@okiba/resource-loader'\n *\n * const resLoader = new ResourceLoader()\n *\n * // if `window.Worker` is available\n * // `fetch` happens on a separate thread!\n *\n * urls.forEach(\n *   url => resLoader.load(url)\n *     .then(console.log('Loaded! 📦'))\n *     .catch(console.log('Fail! ☹️'))\n * )\n *\n * @todo  Handle abortion\n * @todo  Fetch is not on IE11\n * @todo  Clone response and pass it as promise reslult\n */\nimport {createWorker} from '@okiba/worker-utils'\n\nconst workerScript = `\n  onmessage = ({data}) => {\n      self.fetch(data.url, {mode: 'cors'})\n        .then(r =>\n          postMessage({url: data.url, value: r.ok})\n        )\n        .catch(_ =>\n          postMessage({url: data.url, value: false})\n        )\n    }\n`\n\nclass ResourceLoader {\n  constructor() {\n    this.cache = {}\n    if (window.Worker) {\n      this.worker = createWorker(workerScript)\n    }\n  }\n\n  /**\n   * Initiates loading of a resource at a given URL\n   * @param  {String} url Resource URL\n   * @return {Promise} A promise which will be resolved if the resource\n   * is loaded and rejected if not.\n   */\n  load(url) {\n    if (this.cache[url]) return this.cache[url]\n\n    this.cache[url] = this.worker\n      ? this._loadWithWorker(url)\n      : this._loadWithFetch(url)\n\n    this.cache[url]\n      .catch(_ => delete this.cache[url])\n\n    return this.cache[url]\n  }\n\n  _loadWithWorker(url) {\n    const p = new Promise((res, rej) => {\n      this.worker.addEventListener(\n        'message',\n        ({data}) => data.value ? res() : rej()\n      )\n    })\n    this.worker.postMessage({url})\n    return p\n  }\n\n  _loadWithFetch(url) {\n    return new Promise((res, rej) => {\n      fetch(url, {mode: 'cors'})\n        .then(r => r.ok ? res() : rej())\n        .catch(rej)\n    })\n  }\n\n  destroy() {\n    delete this.cache\n    if (this.worker) {\n      this.worker.terminate()\n    }\n  }\n}\n\nexport default ResourceLoader\n"],"names":["workerScript","ResourceLoader","cache","window","Worker","worker","createWorker","url","_loadWithWorker","_loadWithFetch","_","p","Promise","res","rej","addEventListener","data","value","postMessage","fetch","mode","then","r","ok","terminate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAMA,YAAY,iQAAlB;;IAYMC;;;4BACU;;;SACPC,KAAL,GAAa,EAAb;;QACIC,MAAM,CAACC,MAAX,EAAmB;WACZC,MAAL,GAAcC,YAAY,CAACN,YAAD,CAA1B;;;;;;;;;;;;;yBAUCO,KAAK;;;UACJ,KAAKL,KAAL,CAAWK,GAAX,CAAJ,EAAqB,OAAO,KAAKL,KAAL,CAAWK,GAAX,CAAP;WAEhBL,KAAL,CAAWK,GAAX,IAAkB,KAAKF,MAAL,GACd,KAAKG,eAAL,CAAqBD,GAArB,CADc,GAEd,KAAKE,cAAL,CAAoBF,GAApB,CAFJ;WAIKL,KAAL,CAAWK,GAAX,WACS,UAAAG,CAAC;eAAI,OAAO,KAAI,CAACR,KAAL,CAAWK,GAAX,CAAX;OADV;aAGO,KAAKL,KAAL,CAAWK,GAAX,CAAP;;;;oCAGcA,KAAK;;;UACbI,CAAC,GAAG,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;QAClC,MAAI,CAACT,MAAL,CAAYU,gBAAZ,CACE,SADF,EAEE;cAAEC,IAAF,QAAEA,IAAF;iBAAYA,IAAI,CAACC,KAAL,GAAaJ,GAAG,EAAhB,GAAqBC,GAAG,EAApC;SAFF;OADQ,CAAV;WAMKT,MAAL,CAAYa,WAAZ,CAAwB;QAACX,GAAG,EAAHA;OAAzB;aACOI,CAAP;;;;mCAGaJ,KAAK;aACX,IAAIK,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;QAC/BK,KAAK,CAACZ,GAAD,EAAM;UAACa,IAAI,EAAE;SAAb,CAAL,CACGC,IADH,CACQ,UAAAC,CAAC;iBAAIA,CAAC,CAACC,EAAF,GAAOV,GAAG,EAAV,GAAeC,GAAG,EAAtB;SADT,WAESA,GAFT;OADK,CAAP;;;;8BAOQ;aACD,KAAKZ,KAAZ;;UACI,KAAKG,MAAT,EAAiB;aACVA,MAAL,CAAYmB,SAAZ;;;;;;;;;;"}