{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module class-utils\n * @description Utilities that operate on classes\n */\n\n/**\n * Mixes properties and methods from a class into a given `this` context\n * @example\n * class Fruit {\n *   constructor() {\n *     this.isPeeled = false\n *   }\n *\n *   peel() {\n *     this.isPeeled = true\n *   }\n * }\n *\n * class Coloured {\n *   constructor(color) {\n *     this.color = color\n *   }\n * }\n *\n * class Edible {\n *   constructor(color) {\n *     mixin(Fruit, this)\n *     mixin(Coloured, this, color)\n *   }\n * }\n *\n * const edible = new Edible('red')\n * edible.peel()\n * console.log(edible.isPeeled, edible.color)\n * // Logs: true, 'red'\n *\n * @param {Class} BaseClass The class definition to mix-in\n * @param {Object} context The context that has to include methods and props\n * @param {...any} Arguments to pass to the BaseClass constructor\n */\nexport function mixin(BaseClass, context, ...args) {\n  const base = new BaseClass(...args)\n  for (const k in base) {\n    context[k] = base[k]\n  }\n\n  Object.getOwnPropertyNames(base.constructor.prototype)\n    .forEach(k => {\n      if (k !== 'constructor') {\n        context[k] = base.constructor.prototype[k].bind(context)\n      }\n    })\n}\n"],"names":["mixin","BaseClass","context","args","base","k","Object","getOwnPropertyNames","constructor","prototype","forEach","bind"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,AAAO,SAASA,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,EAA4C;oCAANC,IAAM;IAANA,IAAM;;;MAC3CC,IAAI,cAAOH,SAAP,EAAoBE,IAApB,CAAV;;OACK,IAAME,CAAX,IAAgBD,IAAhB,EAAsB;IACpBF,OAAO,CAACG,CAAD,CAAP,GAAaD,IAAI,CAACC,CAAD,CAAjB;;;EAGFC,MAAM,CAACC,mBAAP,CAA2BH,IAAI,CAACI,WAAL,CAAiBC,SAA5C,EACGC,OADH,CACW,UAAAL,CAAC,EAAI;QACRA,CAAC,KAAK,aAAV,EAAyB;MACvBH,OAAO,CAACG,CAAD,CAAP,GAAaD,IAAI,CAACI,WAAL,CAAiBC,SAAjB,CAA2BJ,CAA3B,EAA8BM,IAA9B,CAAmCT,OAAnC,CAAb;;GAHN;;;;;"}