{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module TimeProgress\n * @description Maps progress ovrer time, normalized between 0 and 1\n *\n * @example\n * import TimeProgress from '@okiba/time-progress'\n *\n * const tp = new TimeProgress(400)\n * tp.setProgress(0.2)\n *\n *  function loop() {\n *   const progress = tp.update()\n *   domeElement.style.opacity = progress\n *\n *   if (progress > 0.8 || progress < 0.2) {\n *     tp.reverse()\n *   }\n *\n *   requestAnimationFrame(loop)\n * }\n *\n * requestAnimationFrame(loop)\n */\nimport {cap, round} from '@okiba/math'\n\nfunction checkActive() {\n  if (this.direction === -1 && this.progress > 0) {\n    this.isActive = true\n  } else if (this.direction === 1 && this.progress < 1) {\n    this.isActive = true\n  } else {\n    this.isActive = false\n  }\n}\n\nfunction updateDelta() {\n  this.time = performance.now()\n  if (this.lastTime === null) {\n    this.lastTime = this.time\n  }\n  this.delta = this.time - this.lastTime\n  this.lastTime = this.time\n}\n\n/**\n * @param [duration=400] Amount of time it takes to reach progress = 1\n */\nclass TimeProgress {\n  constructor(duration = 400) {\n    this.duration = duration\n    this.reset()\n  }\n\n  /**\n   * Has to be called at every loop or whenever you want get an updated progress\n   * @return {Number} Normalized progress in time\n   */\n  update() {\n    updateDelta.call(this)\n    this.elapsed += this.direction * this.delta\n    this.elapsed = cap(this.elapsed, 0, this.duration)\n    this.progress = this.elapsed / this.duration\n    checkActive.call(this)\n    this.progress = round(this.progress, 3)\n    return this.progress\n  }\n\n  /**\n   * Sets the timer back to zero\n   */\n  reset() {\n    this.time = this.lastTime = this.delta = null\n    this.progress = this.elapsed = 0\n    this.direction = 1\n  }\n\n  /**\n   * Forces a certain progress, reflected on the time\n   * @param {Number} progress [description]\n   */\n  setProgress(progress) {\n    progress = cap(progress, 0, 1)\n    this.elapsed = this.duration * Math.abs(this.progress - progress)\n    this.progress = progress\n  }\n\n  /**\n   * Sets a direction in time.\n   * `1` is forward in time (progress goes from 0 to 1)\n   * `-1` is backwards in time (progress goes from 1 to 0)\n   * @param {Number} direction 1 is forward, -1 is backwards\n   */\n  setDirection(direction) {\n    this.direction = direction\n  }\n\n  /**\n   * Reverses the direction in time\n   */\n  reverse() {\n    this.direction *= -1\n  }\n}\n\nexport default TimeProgress\n"],"names":["checkActive","direction","progress","isActive","updateDelta","time","performance","now","lastTime","delta","TimeProgress","duration","reset","call","elapsed","cap","round","Math","abs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASA,WAAT,GAAuB;MACjB,KAAKC,SAAL,KAAmB,CAAC,CAApB,IAAyB,KAAKC,QAAL,GAAgB,CAA7C,EAAgD;SACzCC,QAAL,GAAgB,IAAhB;GADF,MAEO,IAAI,KAAKF,SAAL,KAAmB,CAAnB,IAAwB,KAAKC,QAAL,GAAgB,CAA5C,EAA+C;SAC/CC,QAAL,GAAgB,IAAhB;GADK,MAEA;SACAA,QAAL,GAAgB,KAAhB;;;;AAIJ,SAASC,WAAT,GAAuB;OAChBC,IAAL,GAAYC,WAAW,CAACC,GAAZ,EAAZ;;MACI,KAAKC,QAAL,KAAkB,IAAtB,EAA4B;SACrBA,QAAL,GAAgB,KAAKH,IAArB;;;OAEGI,KAAL,GAAa,KAAKJ,IAAL,GAAY,KAAKG,QAA9B;OACKA,QAAL,GAAgB,KAAKH,IAArB;;;;;;;IAMIK;;;0BACwB;QAAhBC,QAAgB,uEAAL,GAAK;;;;SACrBA,QAAL,GAAgBA,QAAhB;SACKC,KAAL;;;;;;;;;;6BAOO;MACPR,WAAW,CAACS,IAAZ,CAAiB,IAAjB;WACKC,OAAL,IAAgB,KAAKb,SAAL,GAAiB,KAAKQ,KAAtC;WACKK,OAAL,GAAeC,GAAG,CAAC,KAAKD,OAAN,EAAe,CAAf,EAAkB,KAAKH,QAAvB,CAAlB;WACKT,QAAL,GAAgB,KAAKY,OAAL,GAAe,KAAKH,QAApC;MACAX,WAAW,CAACa,IAAZ,CAAiB,IAAjB;WACKX,QAAL,GAAgBc,KAAK,CAAC,KAAKd,QAAN,EAAgB,CAAhB,CAArB;aACO,KAAKA,QAAZ;;;;;;;;4BAMM;WACDG,IAAL,GAAY,KAAKG,QAAL,GAAgB,KAAKC,KAAL,GAAa,IAAzC;WACKP,QAAL,GAAgB,KAAKY,OAAL,GAAe,CAA/B;WACKb,SAAL,GAAiB,CAAjB;;;;;;;;;gCAOUC,UAAU;MACpBA,QAAQ,GAAGa,GAAG,CAACb,QAAD,EAAW,CAAX,EAAc,CAAd,CAAd;WACKY,OAAL,GAAe,KAAKH,QAAL,GAAgBM,IAAI,CAACC,GAAL,CAAS,KAAKhB,QAAL,GAAgBA,QAAzB,CAA/B;WACKA,QAAL,GAAgBA,QAAhB;;;;;;;;;;;iCASWD,WAAW;WACjBA,SAAL,GAAiBA,SAAjB;;;;;;;;8BAMQ;WACHA,SAAL,IAAkB,CAAC,CAAnB;;;;;;;;;"}