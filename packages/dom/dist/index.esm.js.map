{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module  dom\n * @description Utilities to work with dom elements and selectors\n */\nimport {castArray} from '@okiba/arrays'\n\n/**\n * Selects a DOM Element with a certain id\n *\n * @example\n * import {byId} from '@okiba/dom'\n * const apple = byId('apple')\n * console.log(apple) // [div.apple]\n *\n * @param  {String}  id DOM id you are looking for\n *\n * @return {Element} A DOM Element matching `id`\n */\nexport function byId(id) {\n  return document.getElementById(id)\n}\n\n/**\n * Selects a DOM Element, scoped to element\n *\n * @example\n * import {qs} from '@okiba/dom'\n * const pear = qs('.pear')\n * console.log(pear) // [div.pear]\n *\n * @param  {String}   selector            DOM Selector (tag, class, id, anything that can be passed to `querySelector` API)\n * @param  {Element}  [element=document]  DOM Element to scope the selection query, only childs of that element will be tageted\n *\n * @return {Element} A DOM Element matching `selector`\n */\nexport function qs(selector, element = document) {\n  return element.querySelector(selector)\n}\n\n/**\n * Selects an array of DOM Elements, scoped to element\n *\n * @example\n * import {qsa} from '@okiba/dom'\n * const fruits = qsa('.fruit')\n * console.log(fruits) // [div.fruit, div.fruit]\n *\n * @param  {String}   selector            DOM Selector (tag, class, id, anything that can be passed to `querySelector` API)\n * @param  {Element}  [element=document]  DOM Element to scope the selection query, only childs of that element will be tageted\n *\n * @return {Element[]} An array of DOM elements matching `selector`\n */\nexport function qsa(selector, element = document) {\n  return castArray(element.querySelectorAll(selector))\n}\n\nfunction evt(source, type, handler, action, options) {\n  if (!type || !handler) return false\n\n  const elements = castArray(source)\n  const types = castArray(type)\n  const handlers = castArray(handler)\n\n  for (let i = 0; i < elements.length; ++i) {\n    for (let j = 0; j < types.length; ++j) {\n      elements[i][`${action}EventListener`](types[j], handlers[Math.min(j, handlers.length - 1)], options)\n    }\n  }\n\n  return true\n}\n\n/**\n * Attaches an event listener to a DOM Element, or an array of.\n *\n * @example\n * import {qsa, on} from '@okiba/dom'\n * const buttons = qsa('.button')\n *\n * on(buttons, 'click', onClick)\n * on(buttons, ['mouseenter', 'mouseleve'], onMouseChange)\n *\n * // adds `onClick` to 'click' and `onMouseChange` to both 'mouseenter' and 'mouseleave'\n * on(buttons, ['click', mouseenter', 'mouseleve'], [onClick, onMouseChange])\n *\n * @param {(Element|Element[])} [window] source\n * the element which will trigger the event\n * @param {(String|String[])} type\n * the event name to bind. Or an array of\n * @param {(Function|Function[])} handler\n * the callback to be fired at the event. If an array is supplied the handlers will be bound in order,\n * if there are less handlers than event types, the last handler is bound to all remaining events.\n *\n * @return {Boolean} Success of the binding\n */\nexport function on(source, type, handler, options) {\n  return evt(source, type, handler, 'add', options)\n}\n\n/**\n * Detached an event listener from a DOM Element, or an array of.\n *\n * @example\n * import {qs, off} from '@okiba/dom'\n * const button = qs('.button')\n *\n * button.addEventListener('click', onButtonClick)\n * // or okiba's `on` on(button, 'click')\n *\n * off(button, 'click', onButtonClick)\n *\n * // removes `onMouseChange` from both 'mouseenter' and 'mouseleave'\n * off(buttons, ['mouseenter', 'mouseleve'], onMouseChange)\n *\n * // removes `onClick` from 'click' and `onMouseChange` from both 'mouseenter' and 'mouseleave'\n * off(buttons, ['click', mouseenter', 'mouseleve'], [onClick, onMouseChange])\n *\n * @param {(Element|Element[])} [window] source\n * Element which will trigger the event\n * @param {(String|String[])} type\n * Event name to unbind. Or an array of\n * @param {(Function|Function[])} handler\n * Callback bound to the event. If an array is supplied the handlers will be unbound in order,\n * if there are less handlers than event types, the last handler is unbound from all remaining events.\n *\n * @return {Boolean} Success of the unbinding\n */\nexport function off(source, type, handler, options) {\n  return evt(source, type, handler, 'remove', options)\n}\n\n/**\n *\n * Read mouse and touch position in the same way\n *\n * @example\n * import {eventCoords, on} from '@okiba/dom'\n * on(window, ['mousemove', 'touchmove'], onMove)\n *\n * function onMove(e){\n *  const coords = eventCoords(e)\n *  console.log(coords)\n * }\n *\n * @param {Event} DOM Event\n *\n * @return {Object} Event position coordinates (clientX and ClientY)\n */\nexport function eventCoords(event) {\n  let coords = event\n  if (event.type.indexOf('touch') === 0) {\n    coords = event.touches[0] || event.changedTouches[0]\n  }\n  return {\n    clientX: coords.clientX,\n    clientY: coords.clientY,\n  }\n}\n\n/**\n * Gets top and left offsets of an element\n *\n * @example\n * import {qs, offset} from '@okiba/dom'\n * const el = qs('.something')\n * const offsets = offset(el)\n * console.log(offsets) // Logs: {top: 100, left: 100}\n *\n * @param {Element} el The element you want to get offsets of\n *\n * @return {Object} Object containing `top` and `left` offsets\n */\nexport function offset(el) {\n  let left = 0\n  let top = 0\n\n  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {\n    left += el.offsetLeft - (el.tagName !== 'BODY' ? el.scrollLeft : 0)\n    top += el.offsetTop - (el.tagName !== 'BODY' ? el.scrollTop : 0)\n    el = el.offsetParent\n  }\n\n  return {\n    top,\n    left\n  }\n}\n\n\n/**\n * Useful to normalize parameters accepted by modules which work with dom nodes.\n * If you need to have an array of Elements and you want to accept any of: String, String array, Element, Element array\n *\n *\n * @example\n * import {qs, getElements} from '@okiba/dom'\n * const els1 = getElements(['.some', '#thing']) // => [div.some, span#it]\n *\n * const el = qs('.element')\n * const els2 = getElements(el) // => [el]\n *\n * @param {(String|String[]|Element|Element[])} target The target you want to be sure to obtain as an array of Elements\n *\n * @return {Element[]} An array of Elements\n */\nexport function getElements(target) {\n  let els\n\n  if (typeof target === 'string') {\n    els = qsa(target)\n  }\n\n  if (target instanceof Node) {\n    els = [target]\n  }\n\n  if (target instanceof NodeList) {\n    els = castArray(target)\n  }\n\n  if (target instanceof Array) {\n    if (target[0] instanceof Node) {\n      return target\n    } else if (typeof target[0] === 'string') {\n      els = target.reduce((acc, curr) => acc.concat(qsa(curr)), [])\n    }\n  }\n\n  if (!els) {\n    throw new Error('No target provided')\n  }\n\n  return els\n}\n"],"names":["byId","id","document","getElementById","qs","selector","element","querySelector","qsa","castArray","querySelectorAll","evt","source","type","handler","action","options","elements","types","handlers","i","length","j","Math","min","on","off","eventCoords","event","coords","indexOf","touches","changedTouches","clientX","clientY","offset","el","left","top","isNaN","offsetLeft","offsetTop","tagName","scrollLeft","scrollTop","offsetParent","getElements","target","els","Node","NodeList","Array","reduce","acc","curr","concat","Error"],"mappings":";;AAAA;;;;AAIA,AAEA;;;;;;;;;;;;;AAYA,AAAO,SAASA,IAAT,CAAcC,EAAd,EAAkB;SAChBC,QAAQ,CAACC,cAAT,CAAwBF,EAAxB,CAAP;;;;;;;;;;;;;;;;AAgBF,AAAO,SAASG,EAAT,CAAYC,QAAZ,EAA0C;MAApBC,OAAoB,uEAAVJ,QAAU;SACxCI,OAAO,CAACC,aAAR,CAAsBF,QAAtB,CAAP;;;;;;;;;;;;;;;;AAgBF,AAAO,SAASG,GAAT,CAAaH,QAAb,EAA2C;MAApBC,OAAoB,uEAAVJ,QAAU;SACzCO,SAAS,CAACH,OAAO,CAACI,gBAAR,CAAyBL,QAAzB,CAAD,CAAhB;;;AAGF,SAASM,GAAT,CAAaC,MAAb,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,OAA5C,EAAqD;MAC/C,CAACH,IAAD,IAAS,CAACC,OAAd,EAAuB,OAAO,KAAP;MAEjBG,QAAQ,GAAGR,SAAS,CAACG,MAAD,CAA1B;MACMM,KAAK,GAAGT,SAAS,CAACI,IAAD,CAAvB;MACMM,QAAQ,GAAGV,SAAS,CAACK,OAAD,CAA1B;;OAEK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;SACnC,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,MAA1B,EAAkC,EAAEC,CAApC,EAAuC;MACrCL,QAAQ,CAACG,CAAD,CAAR,WAAeL,MAAf,oBAAsCG,KAAK,CAACI,CAAD,CAA3C,EAAgDH,QAAQ,CAACI,IAAI,CAACC,GAAL,CAASF,CAAT,EAAYH,QAAQ,CAACE,MAAT,GAAkB,CAA9B,CAAD,CAAxD,EAA4FL,OAA5F;;;;SAIG,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BF,AAAO,SAASS,EAAT,CAAYb,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCE,OAAnC,EAA4C;SAC1CL,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB,KAAxB,EAA+BE,OAA/B,CAAV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BF,AAAO,SAASU,GAAT,CAAad,MAAb,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoCE,OAApC,EAA6C;SAC3CL,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB,QAAxB,EAAkCE,OAAlC,CAAV;;;;;;;;;;;;;;;;;;;;AAoBF,AAAO,SAASW,WAAT,CAAqBC,KAArB,EAA4B;MAC7BC,MAAM,GAAGD,KAAb;;MACIA,KAAK,CAACf,IAAN,CAAWiB,OAAX,CAAmB,OAAnB,MAAgC,CAApC,EAAuC;IACrCD,MAAM,GAAGD,KAAK,CAACG,OAAN,CAAc,CAAd,KAAoBH,KAAK,CAACI,cAAN,CAAqB,CAArB,CAA7B;;;SAEK;IACLC,OAAO,EAAEJ,MAAM,CAACI,OADX;IAELC,OAAO,EAAEL,MAAM,CAACK;GAFlB;;;;;;;;;;;;;;;;AAmBF,AAAO,SAASC,MAAT,CAAgBC,EAAhB,EAAoB;MACrBC,IAAI,GAAG,CAAX;MACIC,GAAG,GAAG,CAAV;;SAEOF,EAAE,IAAI,CAACG,KAAK,CAACH,EAAE,CAACI,UAAJ,CAAZ,IAA+B,CAACD,KAAK,CAACH,EAAE,CAACK,SAAJ,CAA5C,EAA4D;IAC1DJ,IAAI,IAAID,EAAE,CAACI,UAAH,IAAiBJ,EAAE,CAACM,OAAH,KAAe,MAAf,GAAwBN,EAAE,CAACO,UAA3B,GAAwC,CAAzD,CAAR;IACAL,GAAG,IAAIF,EAAE,CAACK,SAAH,IAAgBL,EAAE,CAACM,OAAH,KAAe,MAAf,GAAwBN,EAAE,CAACQ,SAA3B,GAAuC,CAAvD,CAAP;IACAR,EAAE,GAAGA,EAAE,CAACS,YAAR;;;SAGK;IACLP,GAAG,EAAHA,GADK;IAELD,IAAI,EAAJA;GAFF;;;;;;;;;;;;;;;;;;;AAuBF,AAAO,SAASS,WAAT,CAAqBC,MAArB,EAA6B;MAC9BC,GAAJ;;MAEI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;IAC9BC,GAAG,GAAGxC,GAAG,CAACuC,MAAD,CAAT;;;MAGEA,MAAM,YAAYE,IAAtB,EAA4B;IAC1BD,GAAG,GAAG,CAACD,MAAD,CAAN;;;MAGEA,MAAM,YAAYG,QAAtB,EAAgC;IAC9BF,GAAG,GAAGvC,SAAS,CAACsC,MAAD,CAAf;;;MAGEA,MAAM,YAAYI,KAAtB,EAA6B;QACvBJ,MAAM,CAAC,CAAD,CAAN,YAAqBE,IAAzB,EAA+B;aACtBF,MAAP;KADF,MAEO,IAAI,OAAOA,MAAM,CAAC,CAAD,CAAb,KAAqB,QAAzB,EAAmC;MACxCC,GAAG,GAAGD,MAAM,CAACK,MAAP,CAAc,UAACC,GAAD,EAAMC,IAAN;eAAeD,GAAG,CAACE,MAAJ,CAAW/C,GAAG,CAAC8C,IAAD,CAAd,CAAf;OAAd,EAAoD,EAApD,CAAN;;;;MAIA,CAACN,GAAL,EAAU;UACF,IAAIQ,KAAJ,CAAU,oBAAV,CAAN;;;SAGKR,GAAP;;;;;"}